// Generated by CoffeeScript 2.3.2
(function() {
  var CHECKS, CreateCheck, EMAIL_RE, IS_CHECK, RE_URL, _, uuid, validate;

  _ = require('lodash');

  uuid = function() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
      var r, v;
      r = Math.random() * 16 | 0;
      v = c === 'x' ? r : r & 0x3 | 0x8;
      return v.toString(16);
    });
  };

  IS_CHECK = uuid();

  // taken from https://github.com/manishsaraan/email-validator/blob/master/index.js
  EMAIL_RE = /^[-!#$%&'*+\/0-9=?A-Z^_a-z{|}~](\.?[-!#$%&'*+\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\.?[a-zA-Z0-9])*\.[a-zA-Z](-?[a-zA-Z0-9])+$/;

  // protocol identifier (optional)
  // short syntax # still required
  // user:pass BasicAuth (optional)
  // IP address dotted notation octets
  // excludes loopback network 0.0.0.0
  // excludes reserved space >= 224.0.0.0
  // excludes network & broacast addresses
  // (first & last IP address of each class)
  // host & domain names, may end with dot
  // can be replaced by a shortest alternative
  // (?![-_])(?:[-\\w\\u00a1-\\uffff]{0,63}[^-_]\\.)+
  // TLD identifier name, may end with dot
  // port number (optional)
  // resource path (optional)
  RE_URL = new RegExp("^" + "(?:(?:(?:https?|ftp):)?\\/\\/)" + "(?:\\S+(?::\\S*)?@)?" + "(?:" + "(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])" + "(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}" + "(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))" + "|" + "(?:" + "(?:" + "[a-z0-9\\u00a1-\\uffff]" + "[a-z0-9\\u00a1-\\uffff_-]{0,62}" + ")?" + "[a-z0-9\\u00a1-\\uffff]\\." + ")+" + "(?:[a-z\\u00a1-\\uffff]{2,}\\.?)" + ")" + "(?::\\d{2,5})?" + "(?:[/?#]\\S*)?" + "$", "i");

  CHECKS = {
    sip: function() {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (String(obj[att]).match(/^\+?(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))(:\d+)?$/)) {
          return Promise.resolve();
        } else {
          return Promise.resolve('sip');
        }
      };
    },
    url: function() {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (String(obj[att]).match(RE_URL)) {
          return Promise.resolve();
        } else {
          return Promise.resolve('url');
        }
      };
    },
    phone: function() {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (String(obj[att]).match(/^\+?\d{4,15}$/)) {
          return Promise.resolve();
        }
        return Promise.resolve('phone');
      };
    },
    enum: function(...values) {
      return function(att, obj, ...args) {
        var allowed, i, len1;
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        for (i = 0, len1 = values.length; i < len1; i++) {
          allowed = values[i];
          if (obj[att] === allowed) {
            return Promise.resolve();
          }
        }
        return Promise.resolve('enum');
      };
    },
    filter: function(...attributes) {
      return function(att, obj, ...args) {
        var allowed;
        allowed = {};
        _.each(attributes, function(k) {
          return allowed[k] = true;
        });
        _.each(obj, function(v, k) {
          if (!allowed[k]) {
            return delete obj[k];
          }
        });
        return Promise.resolve();
      };
    },
    boolean: function() {
      return function(att, obj, ...args) {
        obj[att] = Boolean(obj[att]);
        return Promise.resolve();
      };
    },
    default: function(val) {
      return function(att, obj, ...args) {
        if (obj[att] === null || obj[att] === void 0) {
          obj[att] = val;
        }
        return Promise.resolve();
      };
    },
    email: function() {
      return function(att, obj, ...args) {
        var domainParts, email, parts;
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        email = String(obj[att]);
        if (email.length > 254) {
          return Promise.resolve('email');
        }
        if (!EMAIL_RE.test(email)) {
          return Promise.resolve('email');
        }
        parts = email.split("@");
        if (parts[0].length > 64) {
          return Promise.resolve('email');
        }
        domainParts = parts[1].split(".");
        if (domainParts.some(function(part) {
          return part.length > 63;
        })) {
          return Promise.resolve('email');
        }
        return Promise.resolve();
      };
    },
    equals: function(val) {
      return function(att, obj, ...args) {
        if (obj[att] === val) {
          return Promise.resolve();
        } else {
          return Promise.resolve('equals');
        }
      };
    },
    notEquals: function(val) {
      return function(att, obj, ...args) {
        if (obj[att] !== val) {
          return Promise.resolve();
        } else {
          return Promise.resolve('notEquals');
        }
      };
    },
    hasDigit: function() {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (obj[att].match(/[0-9]/)) {
          return Promise.resolve();
        } else {
          return Promise.resolve('hasDigit');
        }
      };
    },
    hasLowerCase: function() {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (obj[att].match(/[a-z]/)) {
          return Promise.resolve();
        } else {
          return Promise.resolve('hasLowerCase');
        }
      };
    },
    hasSpecial: function() {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (obj[att].match(/[^A-Za-z0-9]/)) {
          return Promise.resolve();
        } else {
          return Promise.resolve('hasSpecial');
        }
      };
    },
    hasUpperCase: function() {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (obj[att].match(/[A-Z]/)) {
          return Promise.resolve();
        } else {
          return Promise.resolve('hasUpperCase');
        }
      };
    },
    integer: function() {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (String(Number(String(obj[att]))) === 'NaN') {
          return Promise.resolve('integer');
        }
        if (Math.floor(Number(obj[att])) === Number(obj[att])) {
          return Promise.resolve();
        } else {
          return Promise.resolve('integer');
        }
      };
    },
    like: function(re) {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (String(obj[att]).match(re)) {
          return Promise.resolve();
        } else {
          return Promise.resolve('like');
        }
      };
    },
    notLike: function(re) {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (String(obj[att]).match(re)) {
          return Promise.resolve('notLike');
        } else {
          return Promise.resolve();
        }
      };
    },
    maxLen: function(len) {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (obj[att].length <= len) {
          return Promise.resolve();
        }
        return Promise.resolve('maxLen');
      };
    },
    maxVal: function(val) {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (String(Number(obj[att])) === 'NaN') {
          return Promise.resolve('maxVal');
        }
        if (Number(obj[att]) <= val) {
          return Promise.resolve();
        }
        return Promise.resolve('maxVal');
      };
    },
    minLen: function(len) {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (obj[att].length >= len) {
          return Promise.resolve();
        }
        return Promise.resolve('minLen');
      };
    },
    minVal: function(val) {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (String(Number(obj[att])) === 'NaN') {
          return Promise.resolve('minVal');
        }
        if (Number(obj[att]) >= val) {
          return Promise.resolve();
        }
        return Promise.resolve('minVal');
      };
    },
    number: function() {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (String(Number(String(obj[att]))) === 'NaN') {
          return Promise.resolve('number');
        }
        obj[att] = Number(obj[att]);
        return Promise.resolve();
      };
    },
    required: function() {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        return Promise.resolve();
      };
    },
    optional: function() {
      return function(att, obj, ...args) {
        if (obj[att] === null || obj[att] === void 0) {
          obj[att] = null;
          return Promise.resolve(null);
        } else {
          return Promise.resolve();
        }
      };
    },
    overwrite: function(val) {
      return function(att, obj, ...args) {
        obj[att] = val;
        return Promise.resolve();
      };
    },
    pick: function(...attributes) {
      return function(att, obj, ...args) {
        var allowed;
        allowed = {};
        _.each(attributes, function(att) {
          return allowed[att] = true;
        });
        _.each(obj, function(v, k) {
          if (!allowed[k]) {
            return delete obj[k];
          }
        });
        return Promise.resolve();
      };
    },
    round: function(decimals) {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (String(Number(String(obj[att]))) === 'NaN') {
          return Promise.resolve('integer');
        }
        decimals || (decimals = 0);
        obj[att] = Number(Math.round(obj[att] + 'e' + decimals) + 'e-' + decimals);
        return Promise.resolve();
      };
    },
    string: function() {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        obj[att] = String(obj[att]);
        return Promise.resolve();
      };
    },
    trim: function() {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        obj[att] = String(obj[att]).replace(/^\s+/, '').replace(/\s+$/, '');
        return Promise.resolve();
      };
    },
    uuid: function() {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (String(obj[att]).match(/........-....-....-....-............/)) {
          return Promise.resolve();
        }
        return Promise.resolve('uuid');
      };
    },
    array: function() {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (_.isArray(obj[att])) {
          return Promise.resolve(void 0);
        }
        return Promise.resolve('array');
      };
    },
    schema: function(schema) {
      return function(att, obj, ...args) {
        var model;
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (!_.isObject(obj[att])) {
          return Promise.resolve('schema');
        }
        model = obj[att];
        return new Promise(function(resolve) {
          return validate(model, schema, {}).then(function(err) {
            if (!err) {
              return resolve(void 0);
            }
            return resolve(err);
          });
        });
      };
    },
    each: function(check) {
      return function(att, obj, ...args) {
        if (obj[att] === null) {
          return Promise.resolve('required');
        }
        if (obj[att] === void 0) {
          return Promise.resolve('required');
        }
        if (!_.isObject(obj[att])) {
          return Promise.resolve('each');
        }
        if (_.size(obj[att]) === 0) {
          return Promise.resolve(void 0);
        }
        if (!check[IS_CHECK]) {
          check = CreateCheck().schema(check);
        }
        return new Promise(function(resolve) {
          var errors, todo;
          if (_.isArray(obj[att])) {
            errors = [];
          } else {
            errors = {};
          }
          todo = _.size(obj[att]);
          return _.each(obj[att], function(item, item_name) {
            var model, schema;
            model = {
              _: item
            };
            schema = {
              _: check
            };
            return validate(model, schema, {}).then(function(err) {
              if (err) {
                errors[item_name] = err._;
              }
              todo--;
              if (todo === 0) {
                if (_.size(errors)) {
                  return resolve(errors);
                }
                return resolve(void 0);
              }
            });
          });
        });
      };
    }
  };

  CreateCheck = function(...args) {
    var self;
    self = {
      todo: []
    };
    self[IS_CHECK] = true;
    self.add = function(...args) {
      return self.todo.push(args);
    };
    _.each(CHECKS, function(check_generator, check_name) {
      return self[check_name] = function(...args) {
        self.add(check_name, check_generator(...args));
        return self;
      };
    });
    self._run = function(index, att, model) {
      index || (index = 0);
      if (self.todo.length === index) {
        return Promise.resolve(null);
      }
      return new Promise(function(resolve, reject) {
        return self.todo[index][1](att, model, ...args).then(function(status) {
          if (status !== void 0) {
            return resolve(status);
          }
          return self._run(index + 1, att, model).then(resolve);
        });
      });
    };
    self.run = function(att, model) {
      return self._run(0, att, model);
    };
    return self;
  };

  validate = function(model, constraints, errors) {
    var constraint, constraint_name, constraint_names;
    constraints = _.clone(constraints);
    constraint_names = _.keys(constraints);
    if (constraint_names.length === 0) {
      if (_.isEmpty(errors)) {
        return Promise.resolve(null);
      }
      return Promise.resolve(errors);
    }
    constraint_name = constraint_names.shift();
    constraint = constraints[constraint_name];
    delete constraints[constraint_name];
    return new Promise(function(resolve) {
      return constraint.run(constraint_name, model).then(function(error) {
        if (error !== null) {
          errors[constraint_name] = error;
        }
        return validate(model, constraints, errors).then(resolve);
      });
    });
  };

  module.exports = CreateCheck;

  module.exports.check = CreateCheck;

  module.exports.register = function(checkname, check) {
    return CHECKS[checkname] = check;
  };

  module.exports.validate = function(model) {
    return {
      with: function(schema) {
        if (!schema[IS_CHECK]) {
          schema = CreateCheck().schema(schema);
        }
        return schema.run('_', {
          '_': model
        });
      }
    };
  };

}).call(this);
